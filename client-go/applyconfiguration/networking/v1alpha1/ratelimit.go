/*
Copyright MatrixInfer-AI Authors.

  Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	networkingv1alpha1 "matrixinfer.ai/matrixinfer/pkg/apis/networking/v1alpha1"
)

// RateLimitApplyConfiguration represents a declarative configuration of the RateLimit type for use
// with apply.
type RateLimitApplyConfiguration struct {
	TokensPerUnit *uint32                           `json:"tokensPerUnit,omitempty"`
	Unit          *networkingv1alpha1.RateLimitUnit `json:"unit,omitempty"`
}

// RateLimitApplyConfiguration constructs a declarative configuration of the RateLimit type for use with
// apply.
func RateLimit() *RateLimitApplyConfiguration {
	return &RateLimitApplyConfiguration{}
}

// WithTokensPerUnit sets the TokensPerUnit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TokensPerUnit field is set to the value of the last call.
func (b *RateLimitApplyConfiguration) WithTokensPerUnit(value uint32) *RateLimitApplyConfiguration {
	b.TokensPerUnit = &value
	return b
}

// WithUnit sets the Unit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Unit field is set to the value of the last call.
func (b *RateLimitApplyConfiguration) WithUnit(value networkingv1alpha1.RateLimitUnit) *RateLimitApplyConfiguration {
	b.Unit = &value
	return b
}
