/*
Copyright MatrixInfer-AI Authors.

  Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// InferGroupSpecApplyConfiguration represents a declarative configuration of the InferGroupSpec type for use
// with apply.
type InferGroupSpecApplyConfiguration struct {
	RestartGracePeriodSeconds *int64                                 `json:"restartGracePeriodSeconds,omitempty"`
	NetworkTopology           *NetworkTopologySpecApplyConfiguration `json:"networkTopology,omitempty"`
	GangSchedule              *GangScheduleApplyConfiguration        `json:"gangSchedule,omitempty"`
	Roles                     []RoleApplyConfiguration               `json:"roles,omitempty"`
}

// InferGroupSpecApplyConfiguration constructs a declarative configuration of the InferGroupSpec type for use with
// apply.
func InferGroupSpec() *InferGroupSpecApplyConfiguration {
	return &InferGroupSpecApplyConfiguration{}
}

// WithRestartGracePeriodSeconds sets the RestartGracePeriodSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RestartGracePeriodSeconds field is set to the value of the last call.
func (b *InferGroupSpecApplyConfiguration) WithRestartGracePeriodSeconds(value int64) *InferGroupSpecApplyConfiguration {
	b.RestartGracePeriodSeconds = &value
	return b
}

// WithNetworkTopology sets the NetworkTopology field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NetworkTopology field is set to the value of the last call.
func (b *InferGroupSpecApplyConfiguration) WithNetworkTopology(value *NetworkTopologySpecApplyConfiguration) *InferGroupSpecApplyConfiguration {
	b.NetworkTopology = value
	return b
}

// WithGangSchedule sets the GangSchedule field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GangSchedule field is set to the value of the last call.
func (b *InferGroupSpecApplyConfiguration) WithGangSchedule(value *GangScheduleApplyConfiguration) *InferGroupSpecApplyConfiguration {
	b.GangSchedule = value
	return b
}

// WithRoles adds the given value to the Roles field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Roles field.
func (b *InferGroupSpecApplyConfiguration) WithRoles(values ...*RoleApplyConfiguration) *InferGroupSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRoles")
		}
		b.Roles = append(b.Roles, *values[i])
	}
	return b
}
